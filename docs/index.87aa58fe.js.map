{"mappings":"YAAA,MACMA,EADSC,SAASC,cAAc,UACnBC,WAAW,MAMxBC,EAAe,IACZC,KAAKC,MAAuB,GAAjBD,KAAKE,SALN,IAQbC,EAAqB,IAClBH,KAAKE,SAAW,GAAM,GAAI,EAc7BE,EAAeC,IACnB,IAAIC,EAAYD,EAAM,GACtB,MAAME,EAAuC,KAAX,GAAhBP,KAAKE,SAAgB,IAAaI,EACpD,IAAIE,EAAMH,EAAM,GAAKE,EACrB,OAAIC,GA3Ba,IA2BQA,GA5BX,MA6BdA,GAAO,EAAID,EACXD,IAAa,GAFmC,CAACD,EAAM,GAAIA,EAAM,GAAIG,EAAKF,EAG/B,EAOvCG,EAAU,MACd,IAAIC,EAAsB,CACxB,CAAC,EAAG,EAAGX,IAAgBI,KACvB,CAAC,EAAG,EAAGJ,IAAgBI,KACvB,CAAC,EAAG,EAAGJ,IAAgBI,KACvB,CAAC,EAAG,EAAGJ,IAAgBI,MAEzB,MAAO,KACLO,EAAsBA,EAXZC,IAAIP,GAfG,EAACQ,EAAmBC,KACvCD,EAAKE,SAAQT,GARK,EAACA,EAAkBQ,KACrC,MAAOE,EAAGC,EAAGR,GAAOH,EACpBQ,EAAQI,UAAY,OAAOT,eAC3BK,EAAQK,SAASH,EAAGC,EAAG,EAAG,GAC1BH,EAAQK,SAASH,EAAGC,EAAG,EAAG,EAAE,EAING,CAAYd,EAAOQ,IAAS,EA0BhDO,CAAaV,EAAQf,GACrB0B,sBAAsBZ,EAAQ,CAEjC,EAZe,GAchBA,G","sources":["src/app.ts"],"sourcesContent":["const canvas = document.querySelector('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\nconst TOP_HUE = 144;\nconst BOTTOM_HUE = 50;\n\ntype PixelType = [number, number, number, number];\n\nconst getRandomHue = (): number => {\n  return Math.floor(Math.random() * (TOP_HUE - BOTTOM_HUE) + BOTTOM_HUE);\n};\n\nconst getRandomDirection = (): number => {\n  return Math.random() > 0.5 ? 1 : -1;\n};\n\nconst renderPixel = (pixel: PixelType, context: CanvasRenderingContext2D) => {\n  const [x, y, hue] = pixel;\n  context.fillStyle = `hsl(${hue}, 50%, 40%)`;\n  context.fillRect(x, y, 1, 1);\n  context.fillRect(x, y, 1, 1);\n};\n\nconst renderPixels = (data: PixelType[], context: CanvasRenderingContext2D) => {\n  data.forEach(pixel => renderPixel(pixel, context));\n};\n\nconst updatePixel = (pixel: PixelType): PixelType => {\n  let direction = pixel[3];\n  const velocity = (Math.random() * 30 + 20) * 0.01 * direction;\n  let hue = pixel[2] + velocity;\n  if (hue >= BOTTOM_HUE && hue <= TOP_HUE) return [pixel[0], pixel[1], hue, direction];\n  hue -= 2 * velocity;\n  direction *= -1;\n  return [pixel[0], pixel[1], hue, direction];\n};\n\nconst updatePixels = (data: PixelType[]): PixelType[] => {\n  return data.map(updatePixel);\n};\n\nconst animate = ((): () => void => {\n  let pixels: PixelType[] = [\n    [0, 0, getRandomHue(), getRandomDirection()],\n    [1, 0, getRandomHue(), getRandomDirection()],\n    [0, 1, getRandomHue(), getRandomDirection()],\n    [1, 1, getRandomHue(), getRandomDirection()],\n  ];\n  return () => {\n    pixels = updatePixels(pixels);\n    renderPixels(pixels, ctx);\n    requestAnimationFrame(animate);\n  };\n})();\n\nanimate();\n"],"names":["$253ce2a319769a4a$var$ctx","document","querySelector","getContext","$253ce2a319769a4a$var$getRandomHue","Math","floor","random","$253ce2a319769a4a$var$getRandomDirection","$253ce2a319769a4a$var$updatePixel","pixel","direction","velocity","hue","$253ce2a319769a4a$var$animate","pixels","map","data","context","forEach","x","y","fillStyle","fillRect","$253ce2a319769a4a$var$renderPixel","$253ce2a319769a4a$var$renderPixels","requestAnimationFrame"],"version":3,"file":"index.87aa58fe.js.map"}